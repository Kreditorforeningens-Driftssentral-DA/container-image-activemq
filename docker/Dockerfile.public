# Build arguments
ARG image_build="debian:stable"
ARG image_runtime="azul/zulu-openjdk-debian:11"

#///////////////////////////////////////////////
#// STAGE 1: Download external resources
#///////////////////////////////////////////////

FROM "${image_build}" as pre

# Build args
ARG exports=/opt/activemq
ARG activemq_version="5.17.1"
ARG hawtio_version="2.14.5"
ARG jdbc_version="42.3.4"

ARG activemq_url="https://archive.apache.org/dist/activemq/${activemq_version}/apache-activemq-${activemq_version}-bin.tar.gz"
ARG hawtio_url="https://repo1.maven.org/maven2/io/hawt/hawtio-default/${hawtio_version}/hawtio-default-${hawtio_version}.war"
ARG jdbc_url="https://repo1.maven.org/maven2/org/postgresql/postgresql/${jdbc_version}/postgresql-${jdbc_version}.jar"

RUN set -ex \
  && echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \
  && apt-get update \
  && apt-get -qqy install --no-install-recommends apt-utils > /dev/null 2>&1 \
  && apt-get -qqy install ssl-cert tar unzip curl \
  && apt-get autoclean

# ActiveMQ
RUN set -ex \
  && mkdir -p ${exports} \
  && mkdir -p ${exports}/tmp \
  && curl -fsSL --retry 3 ${activemq_url} -o /tmp/amq.tar.gz \
  && tar xzf /tmp/amq.tar.gz -C ${exports} --strip-components=1 \
  && rm -rf /tmp/*.tar.gz

# Hawtio
RUN set -ex \
  && mkdir -p ${exports}/webapps/hawtio \
  && curl -fsSL --retry 3 ${hawtio_url} -o ${exports}/webapps/hawtio/hawtio-default.war

# Postgres JDBC
RUN set -ex \
  && mkdir -p ${exports}/lib/optional \
  && curl -fsSL --retry 3 ${jdbc_url} -o ${exports}/lib/optional/postgresql-jdbc.jar

# Customize defaults for container use
RUN set -ex \
  && sed -i 's/127.0.0.1/0.0.0.0/g' ${exports}/conf/jetty.xml \
  && sed -i 's/127.0.0.1/0.0.0.0/g' ${exports}/conf/activemq.xml \
  && sed -ri 's/^(\s*)ACTIVEMQ_OPTS_MEMORY=(.*)/#\1ACTIVEMQ_OPTS_MEMORY="-XX:MaxRAMPercentage=85.0 -XX:InitialRAMPercentage=85.0 -XX:+ExitOnOutOfMemoryError"/g' ${exports}/bin/env

#///////////////////////////////////////////////
#// STAGE 2: Create runtime image
#///////////////////////////////////////////////

FROM "${image_runtime}"

# Build args
ARG build_imports=/opt/activemq

ENV ACTIVEMQ_USER="activemq" \
    ACTIVEMQ_HOME="/opt/activemq"

ENV ACTIVEMQ_CONF="${ACTIVEMQ_HOME}/conf" \
    ACTIVEMQ_DATA="${ACTIVEMQ_HOME}/data" \
    ACTIVEMQ_TMP="${ACTIVEMQ_HOME}/tmp"

ENV PATH="${ACTIVEMQ_HOME}/bin:${PATH}" \
    LC_ALL="C" \
    LANGUAGE="en_US.UTF-8" \
    TZ="UTC"
    #JAVA_TOOL_OPTIONS="-XX:MaxRAMPercentage=85.0 -XX:InitialRAMPercentage=85.0 -XX:+ExitOnOutOfMemoryError"

# Add default user
RUN set -ex \
  && useradd \
     --comment "ActiveMQ user" \
     --base-dir /home \
     --home-dir ${ACTIVEMQ_HOME} \
     --no-create-home \
     --system \
     --user-group \
     ${ACTIVEMQ_USER}

# Add required applications
RUN set -ex \
  && echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \
  && apt-get update \
  && apt-get -qqy install --no-install-recommends apt-utils > /dev/null 2>&1 \
  && apt-get -qqy install --no-install-recommends procps ssl-cert gosu dumb-init \
  && apt-get autoclean

# Add files
COPY --from=pre --chown=${ACTIVEMQ_USER} ["${build_imports}","${ACTIVEMQ_HOME}"]

VOLUME ["${ACTIVEMQ_DATA}"]
EXPOSE 1883 5672 8161 61613 61614 61616
WORKDIR "${ACTIVEMQ_HOME}"

COPY --chmod=751 ["scripts/docker-entrypoint.debian.sh","/usr/local/bin/docker-entrypoint.sh"]
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["activemq","console"]
