<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <!-- Allows us to use system properties as variables in this configuration file -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
    <property name="locations">
      <list>
        <value>file:${activemq.conf}/credentials.properties</value>
        <value>file:${activemq.conf}/db.properties</value>
      </list>
    </property>
  </bean>

  <bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery" lazy-init="false" scope="singleton" init-method="start" destroy-method="stop">
  </bean>
  {% if postgres_enabled %}
  <bean id="postgres-ds" class="org.apache.commons.dbcp2.BasicDataSource">
    <property name="driverClassName" value="org.postgresql.Driver" />
    <property name="url" value="${postgres.url}" />
    <property name="username" value="${postgres.username}" />
    <property name="password" value="${postgres.password}" />
    <property name="initialSize" value="${postgres.init_connections}" />
    <property name="maxTotal" value="${postgres.max_connections}" />
    <property name="maxIdle" value="${postgres.idle_connections}" />
    <property name="validationQuery" value="select 1" />
    <property name="testWhileIdle" value="true" />
    <property name="timeBetweenEvictionRunsMillis" value="30000" />
    <!-- property name="poolPreparedStatements" value="true" /-->
    <!-- property name="connectionProperties" value="[targetServerType=master,readOnly=false]" /-->
    <!-- property name="dataSourceName" value="postgres" /-->
  </bean>
  {% endif %}
  <!-- broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}" -->
  <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}" useJmx="true" schedulerSupport="true">

    <destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry topic=">">
            <!--
            The constantPendingMessageLimitStrategy is used to prevent
            slow topic consumers to block producers and affect other consumers
            by limiting the number of messages that are retained
            For more information, see:
            
            http://activemq.apache.org/slow-consumer-handling.html
            -->
            <pendingMessageLimitStrategy>
              <constantPendingMessageLimitStrategy limit="10000"/>
            </pendingMessageLimitStrategy>
          </policyEntry>
        </policyEntries>
      </policyMap>
    </destinationPolicy>


    <!--
    The managementContext is used to configure how ActiveMQ is exposed in
    JMX. By default, ActiveMQ uses the MBean server that is started by
    the JVM. For more information, see:

    http://activemq.apache.org/jmx.html
    -->
    <managementContext>
      <!-- managementContext createConnector="false" /-->
      <managementContext connectorPort="1099" rmiServerPort="1098" createConnector="true" />
    </managementContext>

    <!-- See http://activemq.apache.org/persistence.html -->
    <persistenceAdapter>
    {% if postgres_enabled -%}
      <jdbcPersistenceAdapter dataDirectory="${activemq.data}" dataSource="#postgres-ds" createTablesOnStartup="{{postgres_init}}" />
    {% else %}
      <kahaDB directory="${activemq.data}/kahadb"/>
    {% endif -%}
    </persistenceAdapter>

    <!--
    The systemUsage controls the maximum amount of space the broker will
    use before disabling caching and/or slowing down producers. For more information, see:
    http://activemq.apache.org/producer-flow-control.html
    -->

    <systemUsage>
      <systemUsage>
        <memoryUsage>
          <memoryUsage percentOfJvmHeap="85" />
        </memoryUsage>
        <storeUsage>
          <storeUsage limit="10 gb"/>
        </storeUsage>
        <tempUsage>
          <tempUsage limit="5 gb"/>
        </tempUsage>
      </systemUsage>
    </systemUsage>

    <!--
    The transport connectors expose ActiveMQ over a given protocol to
    clients and other brokers. For more information, see:

    http://activemq.apache.org/configuring-transports.html
    -->

    <transportConnectors>
      <!--
        https://activemq.apache.org/configuring-wire-formats
        wireFormat.maxFrameSize: DOS protection, limit concurrent connections to 1000 and frame size to 100MiB (Not MB)
      -->
      {% if ampq_enabled -%}
      <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      {% endif %}
      {% if stomp_enabled -%}
      <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      {% endif %}
      {% if mqtt_enabled -%}
      <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      {% endif %}
      {% if ws_enabled -%}
      <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      {% endif %}
      {% if openwire_enabled -%}
      <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?wireFormat.maxInactivityDuration={{openwire_maxinactivity}}&amp;maximumConnections={{openwire_maxconn}}&amp;wireFormat.maxFrameSize={{openwire_maxframesize}}"/>
      {% endif %}
    </transportConnectors>

    <!-- destroy the spring context on shutdown to stop jetty -->
    <shutdownHooks>
      <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
    </shutdownHooks>
  </broker>

  <!--
  Enable web consoles, REST and Ajax APIs and demos
  The web consoles requires by default login, you can disable this in the jetty.xml file
  Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
  -->
  <import resource="jetty.xml"/>

</beans>

